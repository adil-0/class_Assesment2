#include<iostream>
#include<cstdlib>
using namespace std;
struct btree 
{
int data;
struct btree * left;
struct btree * right;
};
struct btree * root, * temp;
void create()
{
	temp = (struct btree *)malloc(sizeof(struct btree));
	int n;
	cin>>n;
	temp -> data = n;
	temp->right  = temp->left = NULL;
}
void insert(struct btree * t)
{
	if(t->data < temp -> data && t-> right != NULL){
		insert(t->right);
	}
	else if(t->data < temp -> data && t-> right == NULL){
		t->right = temp;
	}
	else if(t->data > temp -> data && t-> left != NULL){
		insert(t->left);
	}
	else if(t->data > temp -> data && t-> left == NULL){
		t->left = temp;
	}
}
int height(struct btree *t)
{
	if(t == NULL)
	{
		return 0;
	}
	else
	{
		int lheight = height(t->left);
		int rheight = height(t->right);
		if(lheight>rheight)
		{
			return lheight+1;
		}
		else
		{
			return rheight+1;
		}
	}
}
void printgivenlevel(struct btree *t, int i)
{
	if(t == NULL)
	{
		return;
	}
	if(i == 1)
	{
		cout<< t->data << " ";
	}
	else if(i > 1)
	{
		printgivenlevel(t->left, i-1);
		printgivenlevel(t->right, i-1);
	}
}
void levelorder(struct btree * t)
{
	int h = height(t);
	int i;
	for(i = 1; i<=h ; i++)
	{
		printgivenlevel(t , i);
	}	
}
int main()
{
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
	{
		create();
		if(root == NULL)
		{
			root = temp;
		}
		else
		{
			insert(root);
		}
	}
	levelorder(root);
}
